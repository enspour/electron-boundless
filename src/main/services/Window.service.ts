import { BrowserWindow } from "electron";
import debounce from "debounce";

import { Service, Destroyer } from "@main-services";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

export default class WindowService implements Service {
    private window: BrowserWindow;

    initialize(): Destroyer {
        this.window = new BrowserWindow({
            height: 600,
            width: 1000,
            frame: false,
            transparent: true,
            webPreferences: {
                nodeIntegration: true,
                contextIsolation: true,
                preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
            },
        });

        // and load the index.html of the app.
        this.window.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

        // Open the DevTools.
        this.window.webContents.openDevTools();

        const offResize = this.onResize();
        const offMaximize = this.onMaximize();
        const offUnMaximize = this.onUnMaximize();

        return () => {
            offResize();
            offMaximize();
            offUnMaximize();
        };
    }

    close() {
        this.window.close();
    }

    maximize() {
        this.window.maximize();
    }

    unMaximize() {
        this.window.unmaximize();
    }

    minimize() {
        this.window.minimize();
    }

    private onResize() {
        const resize = () => {
            const [width, height] = this.window.getSize();
            this.window.webContents.send("resize", { width, height });
        };

        const event = debounce(resize, 100);

        this.window.on("resize", event);

        return () => this.window.off("resize", event);
    }

    private onMaximize() {
        const event = () => {
            this.window.webContents.send("maximize");
        };

        this.window.on("maximize", event);

        return () => this.window.off("maximize", event);
    }

    private onUnMaximize() {
        const event = () => {
            this.window.webContents.send("un-maximize");
        };

        this.window.on("unmaximize", event);

        return () => this.window.off("unmaximize", event);
    }
}
